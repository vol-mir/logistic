{% extends 'base.html.twig' %}

{% block title %}{{ 'title.page.index.task_goods'|trans }}{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    {% include 'task_goods/_controls.html.twig' %}
                    {% include 'task_goods/_filter.html.twig' %}
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <table id="tasks-goods" class="table table-bordered table-striped table-hover">
                        <thead>
                        <tr>
                            <th class="toggle-all"><i id="select_all" name="select_invoice"></i></th>
                            <th>Код</th>
                            <th>Дата</th>
                            <th>Наименование груза, тара, вес, примечание</th>
                            <th>Организация</th>
                            <th>Сотрудник, отдел</th>
                            <th>Статус</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                        <tr>
                            <th></th>
                            <th>Код</th>
                            <th>Дата</th>
                            <th>Наименование груза, тара, вес, примечание</th>
                            <th>Организация</th>
                            <th>Сотрудник, отдел</th>
                            <th>Статус</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </tfoot>
                    </table>
                </div>
                <!-- /.card-body -->
                <div class="card-footer">
                    {% include 'task_goods/_controls.html.twig' %}
                </div>
                <!-- /.card-footer -->
            </div>
            <!-- /.card -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->

    {% include 'modals/delete.html.twig' %}
    {% include 'modals/review.html.twig' %}
    {% include 'modals/edit_group.html.twig' %}
{% endblock %}


{% block javascripts %}
    <script>
        $(function () {

            let columnDateTaskGoods = 2;
            let columnUser = 5;
            let columnStatus = 6;
            let columnYid = 8;

            let statusCheck = $('#status-check');
            let statusSelect = $('#status-select');
            let userCheck = $('#user-check');
            let userSelect = $('#user-select');
            let dateCheck = $('#date-check');
            let dateInput = $('#date-input');

            let table = $("#tasks-goods").DataTable({
                "columnDefs": [
                    // These are the column name variables that will be sent to the server
                    {
                        "name": "checkbox",
                        "targets": 0,
                        "orderable": false,
                        "searchable": false,
                        className: 'select-checkbox'
                    },
                    {"name": "id", "targets": 1},
                    {"name": "dateTaskGoods", "targets": columnDateTaskGoods},
                    {"name": "goods", "targets": 3},
                    {"name": "organization", "targets": 4},
                    {"name": "user", "targets": columnUser},
                    {"name": "status", "targets": columnStatus},
                    {"name": "control", "targets": 7, "orderable": false, "searchable": false},
                    {"name": "yid", "visible": false, "targets": columnYid},
                ],
                "ajax": {
                    "url": "{{ path('task_goods_datatables') }}",
                    "type": "POST"
                },
                "stateSave": true,
                "processing": true,
                "serverSide": true,
                "responsive": true,
                "autoWidth": false,
                "paging": true,
                "info": true,
                "searching": true,
                "pageLength": 10,
                "order": [[2, 'desc']],
                "language": {
                    "url": "{{ asset('dist/json/dataTables.ru.lang.json') }}"
                },
                "select": {
                    "style": "multi",
                    "selector": "td:first-child"

                },
            }).on('select.dt deselect.dt', function (evtObj) {
                let all = table.rows().nodes().length;
                let sel = table.rows(".selected").nodes().length;

                if (all === sel) {

                    $(".toggle-all").closest("tr").addClass("selected");
                } else {

                    $(".toggle-all").closest("tr").removeClass("selected");
                }

            });

            $('#tasks-goods').on('click', '.toggle-all', function () {
                $(this).closest("tr").toggleClass("selected");
                if ($(this).closest("tr").hasClass("selected")) {
                    table.rows().select();
                } else {
                    table.rows().deselect();
                }

            });

            let state = table.state.loaded();

            let startDate = moment().startOf('month');
            let endDate = moment().endOf('month');

            if (state) {
                let colStatusSearch = state.columns[columnStatus].search;
                if (colStatusSearch.search) {
                    statusCheck.prop("checked", true);
                    statusSelect.val(colStatusSearch.search);
                }

                let colUserSearch = state.columns[columnUser].search;
                if (colUserSearch.search) {
                    userCheck.prop("checked", true);
                    userSelect.val(colUserSearch.search);
                }

                let colDateSearch = state.columns[columnDateTaskGoods].search;
                if (colDateSearch.search) {
                    dateCheck.prop("checked", true);
                    let period = JSON.parse(colDateSearch.search);
                    startDate = new Date(Date.parse(period.startDate));
                    endDate = new Date(Date.parse(period.endDate));
                }
            }

            dateInput.daterangepicker({
                startDate: startDate,
                endDate: endDate,
                locale: {
                    format: 'DD.MM.YYYY',
                    applyLabel: 'Принять',
                    cancelLabel: 'Отмена',
                    invalidDateLabel: 'Выберите дату',
                    daysOfWeek: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
                    monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
                    firstDay: 1
                },
            });

            $("#tasks-goods").on("click", ".modal-delete-dialog", function () {
                $('#btn-modal-delete').attr("data-confirm-delete-id", $(this).attr('data-id'));
                $('#modal-delete').modal('show');
            });

            $("#tasks-goods").on("click", ".modal-review-dialog", function () {
                $('#btn-modal-review').attr("data-confirm-review-id", $(this).attr('data-id'));
                $('#modal-review').modal('show');
            });

            $("#modal-delete").on("click", "#btn-modal-delete", function () {

                let url = "{{ path('task_goods_delete', { 'id': 0 }) }}";
                url = url.replace("0", $(this).attr('data-confirm-delete-id'));

                $.ajax({
                    type: 'post',
                    url: url,
                    data: {'_method': 'delete', '_token': '{{ csrf_token('delete-item') }}'},
                    dataType: 'json'
                }).done(function (data) {
                    table.ajax.reload(null, false);
                    toastr.success(data.message);
                });

                $('#btn-modal-delete').attr("data-confirm-delete-id", null);
                $('#modal-delete').modal('hide');
            });

            $("#modal-review").on("click", "#btn-modal-review", function () {

                let url = "{{ path('task_goods_review', { 'id': 0 }) }}";
                url = url.replace("0", $(this).attr('data-confirm-review-id'));

                $.ajax({
                    type: 'post',
                    url: url,
                    data: {'_method': 'put', '_token': '{{ csrf_token('review-item') }}'},
                    dataType: 'json'
                }).done(function (data) {
                    table.ajax.reload(null, false);
                    toastr.success(data.message);
                });

                $('#btn-modal-review').attr("data-confirm-review-id", null);
                $('#modal-review').modal('hide');
            });

            $(".invoice").on("click", function () {

                let tasksGoodsPint = table.rows(".selected").data().pluck(columnYid).toArray();
                let url = "{{ path('task_goods_invoice') }}";

                $.ajax({
                    type: 'post',
                    url: url,
                    data: {
                        '_method': 'post',
                        '_token': '{{ csrf_token('task-goods-invoice') }}',
                        'tasksGoodsPint': tasksGoodsPint
                    },
                    dataType: 'json'
                }).done(function (data) {
                    let params = 'width=' + screen.width;
                    params += ', height=' + screen.height;
                    params += ', top=0, left=0';
                    params += ', fullscreen=yes';
                    params += ', directories=no';
                    params += ', location=no';
                    params += ', menubar=no';
                    params += ', resizable=no';
                    params += ', scrollbars=no';
                    params += ', status=no';
                    params += ', toolbar=no';

                    let printPage = window.open("", "Print", params);
                    printPage.document.writeln(data.report);
                    printPage.document.close();
                    printPage.focus();
                    printPage.print();
                    printPage.close();
                });

            });

            statusCheck.on('change', function () {
                if (this.checked) {
                    table.column(columnStatus).search(statusSelect.val()).draw();
                } else {
                    table.column(columnStatus).search('').draw();
                }
            });

            statusSelect.on('change', function () {
                if (statusCheck.is(":checked")) {
                    table.column(columnStatus).search(statusSelect.val()).draw();
                }
            });

            dateCheck.on('change', function () {
                let period = {
                    startDate: dateInput.data('daterangepicker').startDate,
                    endDate: dateInput.data('daterangepicker').endDate
                };

                if (this.checked) {
                    table.column(columnDateTaskGoods).search(JSON.stringify(period)).draw();
                } else {
                    table.column(columnDateTaskGoods).search('').draw();
                }
            });

            dateInput.on('change', function () {
                let period = {
                    startDate: dateInput.data('daterangepicker').startDate,
                    endDate: dateInput.data('daterangepicker').endDate
                };

                if (dateCheck.is(":checked")) {
                    table.column(columnDateTaskGoods).search(JSON.stringify(period)).draw();
                }
            });

            userCheck.on('change', function () {
                if (this.checked) {
                    table.column(columnUser).search(userSelect.val()).draw();
                } else {
                    table.column(columnUser).search('').draw();
                }
            });

            userSelect.on('change', function () {
                if (userCheck.is(":checked")) {
                    table.column(columnUser).search(userSelect.val()).draw();
                }
            });

            let tasksGoodsEdit = [];

            $(".edit-group").on("click", function () {
                tasksGoodsEdit = table.rows(".selected").data().pluck(columnYid).toArray();
                if (tasksGoodsEdit.length > 0) {
                    $('#modal-edit-group').modal('show');
                }
            });

            $("#modal-edit-group").on("click", "#btn-modal-edit", function () {

                if (tasksGoodsEdit.length === 0) {
                    $('#modal-edit-group').modal('hide');
                    return;
                }

                let formData = {};

                if ($("#edit-form #edit-status").is(':checked')) {
                    formData.statusSelect = $("#edit-form #status-select").val();
                }
                if ($("#edit-form #edit-drivers").is(':checked')) {
                    formData.driversSelect = $("#edit-form #drivers-select").val();
                }
                if ($("#edit-form #edit-transports").is(':checked')) {
                    formData.transportsSelect = $("#edit-form #transports-select").val();
                }
                if ($("#edit-form #edit-report").is(':checked')) {
                    formData.reportTextarea = $("#edit-form #report-textarea").val();
                }

                if ($.isEmptyObject(formData)) {
                    $('#modal-edit-group').modal('hide');
                    return;
                }

                let url = "{{ path('tasks_goods_list_edit') }}";

                $.ajax({
                    type: 'post',
                    url: url,
                    data: {
                        '_method': 'post',
                        '_token': '{{ csrf_token('tasks-goods-list-edit') }}',
                        'tasksGoodsEdit': JSON.stringify(tasksGoodsEdit),
                        'formData': JSON.stringify(formData)
                    },
                    dataType: 'json'
                }).done(function (data) {
                    table.ajax.reload(null, false);
                    toastr.success(data.message);
                });


                $('#modal-edit-group').modal('hide');
            });

        });
    </script>

{% endblock %}